@startuml 2pc
start
:协调者发起prepare消息给各参与者;
:参与者执行事务并写入执行日志,但事务不提交;
if(各参与者执行事务是否出现异常) then (是)
    :参与者反馈执行失败消息给协调者;
    :协调者发送事务中止消息给各参与者,让它们回滚事务;
else (否)
    :各参与者反馈执行成功消息给协调者;
    :协调者发送commit给各参与者;
    :各参与者提交事务;
    :各参与者发送提交事务成功的消息给协调者;
    :协调者收到所有提交事务成功的消息后,完成事务;
endif
end
@enduml


/' 
3pc与2pc的区别主要在于,有个cancommit测试网络,默认事务提交,解决了事务阻塞;
该数据不一致还是会数据不一致;
'/
@startuml 3pc
start
:协调者发起cancommit请求给各参与者;
if (各参与者反馈信息是否可以提交) then (是)
    :协调者发起precommit请求给各参与者;
    :参与者执行事务并写入执行日志,但事务不提交;
    if(各参与者执行事务是否出现异常) then (是)
        :参与者反馈执行失败消息给协调者;
        :协调者发送事务中止消息给各参与者,让它们回滚事务;
    else (否)
        :各参与者反馈执行成功消息给协调者;
        :协调者发送docommit给各参与者;
        :各参与者提交事务,发送提交事务成功的消息给协调者;
        :协调者收到所有提交事务成功的消息后,完成事务;
    endif
else (否)
    :协调者中止事务;
endif
end
@enduml


/' 
at与2pc的区别主要在于,事务默认提交,回滚基于补偿,全局事务提交异步;
at协议只能支持基于sql的关系型数据库;
'/
@startuml at
start
:协调者通知各参与者执行事务;
:各参与者执行事务,写入镜像数据的undo日志,申请全局锁;
if(参与者执行事务是否出现异常的信息) then (是)
    :通知协调者事务执行失败,协调者通知各参与者回滚事务;
    :各参与者开启一个本地事务,查找到相应的undo日志;
    if(参与者取出镜像数据与查询数据比对是否一致) then (是)
        :根据镜像数据和undo日志生成回滚SQL语句;
        :执行回滚语句,通知协调者回滚事务执行成功;
    else
        :执行相关策略(未知);
    endif
else 
    :提交本地事务,通知协调者事务执行成功;
    :协调者收到事务执行成功之后,通知各参与者提交事务;
    :各参与者异步提交事务、删除undo日志;
endif
end
@enduml


/'
tcc基于2pc,不依赖于底层数据源的事务支持,以来自定义的 prepare,commit,rollback
当数据库包含 nosql 时,可以使用该模式.
'/
@startuml tcc 
start

end
@enduml


/'

'/
@startuml saga 
start

end
@enduml